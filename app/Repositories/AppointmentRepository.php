<?php

namespace App\Repositories;

use App\Http\Resources\PatientResource;
use App\Mail\AppointmentConfirmationMail;
use App\Models\Appointment;
use App\Models\Doctor;
use App\Models\Patient;
use App\Models\Role;
use App\Models\Slot;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Str;
use Symfony\Component\HttpFoundation\Response;

class AppointmentRepository extends BaseRepository
{

    public function __construct(Appointment $appointment)
    {
        $this->model=$appointment;

    }

    public function findById($id)
    {
        return parent::findById($id);
        //return PatientResource::collection($patient);
    }

    public function delete($id)
    {
        //$slot=parent::findById($id);
        //User::find($patient->user_id)->delete();
        return parent::delete($id);
    }

    public function update(array $input, $id)
    {
        $currentAppointment=parent::findById($id);
        $input['slot_id']= $input['slot_id'] ?? $currentAppointment->slot_id;
        $input['patient_id']= $input['patient_id'] ?? $currentAppointment->patient_id;
        $input['appointment_date']= Carbon::parse($input['appointment_date'])->format('Y-m-d H:i') ?? $currentSlot->appointment_date;
        $input['doctor_id']=isset($input['doctor_id'])? $input["doctor_id"]:$currentAppointment->doctor_id;
        $input['status']=isset($input['status'])? $input["status"]:$currentAppointment->status;
        return parent::update($input, $id); // TODO: Change the autogenerated stub
    }

    public function create(array $input)
    {

        $users=Patient::find($input['patient_id'])->user()->get();
        foreach ($users as $user){
            $patientName=$user->last_name.' '. $user->first_name;
            $patientEmail=$user->email;
        }
        $users=Doctor::find($input['doctor_id'])->user()->get();
        foreach ($users as $user){
            $doctorName=$user->last_name.' '. $user->first_name;
            $doctorEmail=$user->email;
            //dd($doctorName);
        }
        Carbon::setLocale('fr');
        $date_rdv=Carbon::parse($input['appointment_date'])->translatedFormat('d F Y');
        $date_heure=Carbon::parse($input['appointment_date'])->format('H:i');
        Mail::to($patientEmail)->send(new AppointmentConfirmationMail($patientName,$date_rdv,$date_heure));
        return parent::create($input);
    }
    public function findAll(){
        return Slot::where('start','>=',now())->get();
    }
    public function getAllDoctors(){
        return Doctor::with('user')->get()->sortBy('user.last_name');
    }
    public function getAllSlots(){
        return Slot::where('start','>=',now())
            ->where('status','Available')
            ->orderBy('start','Desc')
            ->get();
    }


}
