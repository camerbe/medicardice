<?php

namespace App\Repositories;

use App\Http\Controllers\Api\AppointmentController;
use App\Http\Resources\PatientResource;
use App\Mail\AnnulationMail;
use App\Mail\AppointmentConfirmationMail;
use App\Models\Appointment;
use App\Models\Doctor;
use App\Models\MedicalRecord;
use App\Models\Patient;
use App\Models\Role;
use App\Models\Slot;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Str;
use Symfony\Component\HttpFoundation\Response;

class MedicalRecordRepository extends BaseRepository
{

    public function __construct(MedicalRecord $medicalRecord)
    {
        $this->model=$medicalRecord;

    }

    public function findById($id)
    {
        return parent::findById($id);
        //return PatientResource::collection($patient);
    }

    public function delete($id)
    {

        return parent::delete($id);
    }

    public function update(array $input, $id)
    {
        $currentMedicarecord=parent::findById($id);
        $input['patient_id']= $input['patient_id'] ?? $currentMedicarecord->patient_id;
        $input['visit_date']= Carbon::parse($input['visit_date'])->format('Y-m-d H:i') ?? $currentMedicarecord->visit_date;
        $input['doctor_id']=isset($input['doctor_id'])? $input["doctor_id"]:$currentMedicarecord->doctor_id;
        $input['notes']=isset($input['notes'])? $input["notes"]:$currentMedicarecord->notes;
        $input['prescriptions']=isset($input['prescriptions'])? $input["prescriptions"]:$currentMedicarecord->prescriptions;
        $input['updated_by']=isset($input['updated_by'])? $input["updated_by"]:$currentMedicarecord->updated_by;
        return parent::update($input, $id); // TODO: Change the autogenerated stub
    }

    public function create(array $input)
    {

        return parent::create($input);
    }
    public function findAll(){
        return MedicalRecord::orderBy('visit_date','desc')->get();
    }

    public function getMedicalRecordsByPatient(int $patient_id){
        return Patient::find($patient_id)->medicalrecords()->get();
    }




}
